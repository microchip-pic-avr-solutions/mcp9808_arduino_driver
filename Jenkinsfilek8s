// Jenkinsfile v2.0.0
pipeline {
    agent {
        kubernetes {
            defaultContainer 'arduino-gcc'
            yamlFile 'cloudprovider.yaml'
        }
    }

    options {
        timestamps()
        timeout(time: 30, unit: 'MINUTES')
    }

   environment {	    
		DEPLOY_TOOL_URL = 'https://bitbucket.microchip.com/scm/citd/tool-github-deploy.git'
        DEPLOY_SCRIPT_FILE = 'tool-github-deploy/tool-github-deploy/tool-github-deploy.py'
        BITBUCKET_REPO = 'https://bitbucket.microchip.com/scm/mcu8mass/mcp9808_arduino_driver.git'
        GITHUB_REPO = 'https://github.com/microchip-pic-avr-solutions/mcp9808_arduino_driver'
        GITHUB_REPO_SHORT = 'mcp9808_arduino_driver'
        GITHUB_ORG = 'microchip-pic-avr-solutions'
        TARGET_BRANCH = 'main'
	}

    stages {
        stage('setup') {
            steps {
                checkout scm
                script {
                    env.GIT_TAG = gitTag()
                    env.GIT_COMMIT = getCommit()

                    if(env.GIT_TAG != '') {
                        currentBuild.displayName = "#${BUILD_NUMBER} | ${JOB_NAME} | RELEASE-CANDIDATE-${env.GIT_TAG}"
                        env.RELEASE_NAME = env.GIT_TAG
                    } else {
                        currentBuild.displayName = "#${BUILD_NUMBER} | ${JOB_NAME} | ${env.GIT_COMMIT}"
                        env.RELEASE_NAME = env.GIT_COMMIT
                    }
                }
            }
        }


        stage('build-examples') {
            steps {
                sh 'chmod +x ./scripts/compile_examples.sh'
                sh './scripts/compile_examples.sh'
            }
        }

        stage('deploy'){
            // Only run if git tag exists and it's the master branch
            when {
                allOf {
                    branch env.TARGET_BRANCH
                }
            }

            // Multi-Stage Deploy
            stages {
                // Clone the deploy tool
                stage('GitHub-Setup') {
                    steps {
                        sh "git clone ${env.DEPLOY_TOOL_URL}"
                        sh "pip3 install PyGithub atlassian-python-api jsonschema packaging lxml"
                    }
                }

                // Sync the bitbucket repository with the github repository
                stage('GitHub-Sync') {
                    steps {
                        script {
                            withCredentials([usernamePassword(credentialsId: 'pic_avr_github', usernameVariable: 'USER_NAME', passwordVariable:'PASS' )]) {
                                sh "python3 ${env.DEPLOY_SCRIPT_FILE} -deploy=true -gpat=${PASS} -dgid=${USER_NAME} -dburl=${env.BITBUCKET_REPO} -dgurl=${env.GITHUB_REPO} -dbranch=${env.TARGET_BRANCH}"
                            }
                        }
                    }
                }

                // Create a new release
                stage('GitHub-Release') {
                    when {
                        expression {
                            env.GIT_TAG != ''
                        }
                    }
                    steps {
                        script {
                            withCredentials([usernamePassword(credentialsId: 'pic_avr_github', usernameVariable: 'USER_NAME', passwordVariable:'PASS' )]) {
                                sh "python3 ${env.DEPLOY_SCRIPT_FILE} -rlo=true -gpat=${PASS} -dgid=${USER_NAME} -rpn=${GITHUB_REPO_SHORT} -rporg=${GITHUB_ORG} -rltt=\"${env.GIT_TAG}\" -rltv=\"${env.GIT_TAG}\""
                            }
                        }
                    }
                    
                }
            }
        }
    }
}


String getCommit() {
    return sh(script: 'git rev-parse HEAD', returnStdout: true)?.trim()
}

String gitTag(){
    return sh(script: "git tag --contains", returnStdout: true)?.trim()
}

def initializeGitForDeployment() {
    execute("git config --global user.email 'microchip@microchip.com'")
    execute("git config --global user.name 'Microchip Technology'")
}